import os
import logging
from typing import Dict, Any, Optional
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
import httpx

from engine.scenario_loader import ScenarioLoader, ScenarioValidationError
from engine.question_analyzer import QuestionAnalyzer
from engine.report_generator import ReportGenerator

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
SCENARIO_PATH = os.getenv('SCENARIO_PATH', 'scenarios/spin_sales/config.json')

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print(f"BOT_TOKEN: {BOT_TOKEN}")
print(f"OPENAI_API_KEY: {OPENAI_API_KEY[:20] if OPENAI_API_KEY else 'None'}...")
print(f"SCENARIO_PATH: {SCENARIO_PATH}")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, Dict[str, Any]] = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –¥–≤–∏–∂–∫–∞
scenario_loader = ScenarioLoader()
question_analyzer = QuestionAnalyzer()
report_generator = ReportGenerator()
scenario_config: Optional[Dict[str, Any]] = None

def get_user_data(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data:
        user_data[user_id] = {
            'question_count': 0,
            'clarity_level': 0,
            'situational_q': 0,
            'problem_q': 0,
            'implication_q': 0,
            'need_payoff_q': 0,
            'client_case': '',
            'last_question_type': '',
            'chat_state': 'new'
        }
    return user_data[user_id]

async def call_openai(system_prompt: str, user_message: str) -> str:
    """–í—ã–∑–æ–≤ OpenAI API"""
    try:
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–∑–æ–≤ OpenAI API...")
        print(f"üìù System prompt: {system_prompt[:100]}...")
        print(f"üí¨ User message: {user_message[:100]}...")
        print(f"üîë API Key: {OPENAI_API_KEY[:20] if OPENAI_API_KEY else 'None'}...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        print(f"üèóÔ∏è –°–æ–∑–¥–∞–µ–º AsyncOpenAI –∫–ª–∏–µ–Ω—Ç...")
        client = openai.AsyncOpenAI(
            api_key=OPENAI_API_KEY,
            http_client=httpx.AsyncClient(
                timeout=httpx.Timeout(30.0),
                limits=httpx.Limits(max_connections=1, max_keepalive_connections=1)
            )
        )
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...")
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ],
            max_tokens=400,
            temperature=0.7
        )
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI")
        
        result = response.choices[0].message.content.strip()
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
        return result
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –≤ call_openai:")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        print(f"   –ü–æ–ª–Ω—ã–π traceback:")
        import traceback
        traceback.print_exc()
        
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
    
def _ensure_scenario_loaded() -> Dict[str, Any]:
    global scenario_config
    if scenario_config is None:
        try:
            loaded = scenario_loader.load_scenario(SCENARIO_PATH)
            scenario_config = loaded.config
        except (FileNotFoundError, ScenarioValidationError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            raise
    return scenario_config

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    print(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cfg = _ensure_scenario_loaded()
    rules = cfg["game_rules"]
    user_data[user_id] = {
        'question_count': 0,
        'clarity_level': 0,
        'per_type_counts': {t['id']: 0 for t in cfg['question_types']},
        'client_case': '',
        'last_question_type': '',
        'chat_state': 'started'
    }
    
    await update.message.reply_text(scenario_loader.get_message('welcome'))
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–µ–π—Å
    try:
        system_prompt = scenario_loader.get_prompt('case_generation')
        client_case = await call_openai(system_prompt, '–°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –∫–µ–π—Å')
        user_data[user_id]['client_case'] = client_case
        user_data[user_id]['chat_state'] = 'waiting_question'
        await update.message.reply_text(
            scenario_loader.get_message('case_generated', client_case=client_case)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–µ–π—Å–∞: {e}")
        await update.message.reply_text(scenario_loader.get_message('error_generic'))

async def scenario_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏."""
    try:
        cfg = _ensure_scenario_loaded()
        info = cfg.get('scenario_info', {})
        await update.message.reply_text(
            f"–°—Ü–µ–Ω–∞—Ä–∏–π: {info.get('name')} v{info.get('version')}\n–û–ø–∏—Å–∞–Ω–∏–µ: {info.get('description')}\n–ü—É—Ç—å: {SCENARIO_PATH}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏.")

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    user_id = update.effective_user.id
    user = get_user_data(user_id)
    
    if not user['last_question_type']:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É.')
        return
    
    cfg = _ensure_scenario_loaded()
    # Map legacy counters for prompt
    situational_q = user['per_type_counts'].get('situational', 0)
    problem_q = user['per_type_counts'].get('problem', 0)
    implication_q = user['per_type_counts'].get('implication', 0)
    need_payoff_q = user['per_type_counts'].get('need_payoff', 0)
    feedback_prompt = scenario_loader.get_prompt(
        'feedback',
        last_question_type=user['last_question_type'],
        question_count=user['question_count'],
        clarity_level=user['clarity_level'],
        situational_q=situational_q,
        problem_q=problem_q,
        implication_q=implication_q,
        need_payoff_q=need_payoff_q,
    )

    try:
        feedback = await call_openai(feedback_prompt, '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é')
        await update.message.reply_text(
            f"üìä –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ –û–¢ –ù–ê–°–¢–ê–í–ù–ò–ö–ê:\n\n{feedback}\n\n–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        await update.message.reply_text(scenario_loader.get_message('error_generic'))

async def send_final_report(update: Update, user: Dict[str, Any]):
<<<<<<< HEAD
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    total_score = user['situational_q'] * 10 + user['problem_q'] * 15 + user['implication_q'] * 25 + user['need_payoff_q'] * 20
    
    if total_score <= 100:
        badge = 'ü•â –ù–∞—á–∏–Ω–∞—é—â–∏–π –∏—Å–∫–∞—Ç–µ–ª—å'
    elif total_score <= 200:
        badge = 'ü•à –ù–∞—Å—Ç–∞–≤–Ω–∏–∫-—Å—Ç—É–¥–µ–Ω—Ç'
    elif total_score <= 300:
        badge = 'ü•á –°—Ç—Ä–∞—Ç–µ–≥ SPIN'
    else:
        badge = 'üèÜ –ú–∞—ç—Å—Ç—Ä–æ SPIN-–ø—Ä–æ–¥–∞–∂'
    
    recommendations = []
    if user['situational_q'] > user['problem_q'] * 2:
        recommendations.append('‚Ä¢ –°–æ–∫—Ä–∞—â–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤')
    if user['problem_q'] == 0:
        recommendations.append('‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π')
    if user['implication_q'] == 0:
        recommendations.append('‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–≤–ª–µ–∫–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–±–ª–µ–º')
    if user['need_payoff_q'] == 0:
        recommendations.append('‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤—ã–≥–æ–¥ —Ä–µ—à–µ–Ω–∏—è')
    if user['clarity_level'] < 50:
        recommendations.append('‚Ä¢ –ì–ª—É–±–∂–µ –∏—Å—Å–ª–µ–¥—É–π—Ç–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞')
    
    recommendations_text = '\n'.join(recommendations) if recommendations else '‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.'
    
    report = f"""üèÅ –¢–†–ï–ù–ò–†–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!

üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:
–ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {user['question_count']}/10
–£—Ä–æ–≤–µ–Ω—å —è—Å–Ω–æ—Å—Ç–∏: {user['clarity_level']}%

üìà –ü–û –¢–ò–ü–ê–ú:
üîç –°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã—Ö: {user['situational_q']}
‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: {user['problem_q']}
üí• –ò–∑–≤–ª–µ–∫–∞—é—â–∏—Ö: {user['implication_q']}  
‚ú® –ù–∞–ø—Ä–∞–≤–ª—è—é—â–∏—Ö: {user['need_payoff_q']}

üèÖ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {badge}
–û–±—â–∏–π –±–∞–ª–ª: {total_score}

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
{recommendations_text}

üöÄ –ü–û–õ–ï–ó–ù–´–ô –ö–û–ù–¢–ï–ù–¢ –ü–û –ü–†–û–î–ñ–ê–ú –ò –ò–ò:
–≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª–µ [–¢–∞–∫—Ç–∏–∫–∞ –ö—É—Ç—É–∑–æ–≤–∞](https://t.me/TaktikaKutuzova)

üéØ –î–ª—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–∞—á–∞—Ç—å" """

=======
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)."""
    cfg = _ensure_scenario_loaded()
    # –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ñ–∏–≥
    user['total_score'] = QuestionAnalyzer().calculate_score(user, cfg['question_types'])
    report = ReportGenerator().generate_final_report(user, cfg)
>>>>>>> c0edbca (Refactor: convert to universal training-bot constructor (engine, scenarios, docs))
    await update.message.reply_text(report)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    message_text = update.message.text
    cfg = _ensure_scenario_loaded()
    rules = cfg['game_rules']
    
    if message_text.lower() in ['–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']:
        await start_command(update, context)
        return
    
    if message_text.upper() == '–î–ê':
        await handle_feedback(update, context)
        return
    
    if message_text.lower() == '–∑–∞–≤–µ—Ä—à–∏—Ç—å':
        user = get_user_data(user_id)
        await send_final_report(update, user)
        if user_id in user_data:
            del user_data[user_id]
        return
    
    if len(message_text) <= rules.get('short_question_threshold', 5):
        await update.message.reply_text('–ó–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–∞—á–∞—Ç—å" –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.')
        return
    
    user = get_user_data(user_id)
    
    if user['question_count'] >= rules['max_questions']:
        await send_final_report(update, user)
        if user_id in user_data:
            del user_data[user_id]
        return
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        qtype = question_analyzer.analyze_type(message_text, cfg['question_types'])
        question_type_name = qtype.get('name', qtype.get('id'))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        user['question_count'] += 1
        user['last_question_type'] = question_type_name

        qid = qtype.get('id')
        user['per_type_counts'][qid] = int(user['per_type_counts'].get(qid, 0)) + 1
        user['clarity_level'] += question_analyzer.calculate_clarity_increase(qtype)
        
        user['clarity_level'] = min(user['clarity_level'], 100)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        client_prompt = scenario_loader.get_prompt('client_response', client_case=user['client_case'])
        client_response = await call_openai(client_prompt, f"–í–æ–ø—Ä–æ—Å: {message_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if user['question_count'] >= rules['max_questions'] or user['clarity_level'] >= rules['target_clarity']:
            if user['clarity_level'] >= rules['target_clarity'] and user['question_count'] >= rules['min_questions_for_completion']:
                await update.message.reply_text(
                    scenario_loader.get_message(
                        'question_feedback',
                        question_type=question_type_name,
                        client_response=client_response,
                        progress_line=scenario_loader.get_message(
                            'progress', count=user['question_count'], max=rules['max_questions'], clarity=user['clarity_level']
                        )
                    )
                )
                await update.message.reply_text(
                    scenario_loader.get_message('clarity_reached', clarity=user['clarity_level'])
                )
            elif user['question_count'] >= rules['max_questions']:
                await send_final_report(update, user)
                if user_id in user_data:
                    del user_data[user_id]
            else:
                await update.message.reply_text(
                    scenario_loader.get_message(
                        'question_feedback',
                        question_type=question_type_name,
                        client_response=client_response,
                        progress_line=scenario_loader.get_message(
                            'progress', count=user['question_count'], max=rules['max_questions'], clarity=user['clarity_level']
                        )
                    )
                )
        else:
            await update.message.reply_text(
                scenario_loader.get_message(
                    'question_feedback',
                    question_type=question_type_name,
                    client_response=client_response,
                    progress_line=scenario_loader.get_message(
                        'progress', count=user['question_count'], max=rules['max_questions'], clarity=user['clarity_level']
                    )
                )
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(scenario_loader.get_message('error_generic'))

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        _ensure_scenario_loaded()
    except Exception:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SCENARIO_PATH –∏ —Ñ–æ—Ä–º–∞—Ç config.json")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞, –Ω–æ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("scenario", scenario_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("SPIN Training Bot –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    import asyncio
    import threading
    
    def run_bot():
        asyncio.run(application.run_polling())
    
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import socket
    
    class HealthCheckHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/health':
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'OK')
            else:
                self.send_response(404)
                self.end_headers()
        
        def log_message(self, format, *args):
            # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
            pass
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
    def find_free_port():
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('', 0))
            s.listen(1)
            port = s.getsockname()[1]
        return port
    
    port = int(os.getenv('PORT', 8080))
    
    try:
        server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
        logger.info(f"Health check server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        server.serve_forever()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ health check —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()

if __name__ == '__main__':
    main()
