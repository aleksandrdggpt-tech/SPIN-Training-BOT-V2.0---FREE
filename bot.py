import os
import logging
from typing import Dict, Any
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
import httpx

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print(f"BOT_TOKEN: {BOT_TOKEN}")
print(f"OPENAI_API_KEY: {OPENAI_API_KEY[:20] if OPENAI_API_KEY else 'None'}...")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, Dict[str, Any]] = {}

# –ü—Ä–æ–º–ø—Ç—ã
CASE_GENERATION_PROMPT = """–í—ã —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–æ–±—Ä–∞–∂–∞–µ—Ç –ù–∏–ª–∞ –†–µ–∫—Ö–µ–º, –∞–≤—Ç–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ SPIN-–ø—Ä–æ–¥–∞–∂. –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–µ–π—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

üéØ –ö–õ–ò–ï–ù–¢–°–ö–ò–ô –ö–ï–ô–°:

–î–æ–ª–∂–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: [–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –∑–∞–∫—É–ø–∫–∞–º/–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏/–ì–ª–∞–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∫/–ì–ª–∞–≤–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä/–ù–∞—á–∞–ª—å–Ω–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞/–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä]
–ö–æ–º–ø–∞–Ω–∏—è: [–ñ–ë–ò –∑–∞–≤–æ–¥/–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥/–ú–µ—Ç–∞–ª–ª–æ—Ç–æ—Ä–≥–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è/–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è/–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π], [—Ä–∞–∑–º–µ—Ä]

üì¶ –í–´ –ü–†–û–î–ê–ï–¢–ï: [–õ–∏—Å—Ç–æ–≤–æ–π –º–µ—Ç–∞–ª–ª/–ê—Ä–º–∞—Ç—É—Ä—É/–¢—Ä—É–±—ã/–ú–µ—Ç–∏–∑—ã/–°–≤–∞—Ä–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã/–ú–µ—Ç–∞–ª–ª–æ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ —Å—Ç–∞–Ω–∫–∏/–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—É—é —Ö–∏–º–∏—é]

‚ÑπÔ∏è –ë–ê–ó–û–í–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: 
[–¢–û–õ–¨–ö–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã —Å —Ü–∏—Ñ—Ä–∞–º–∏ - –æ–±—ä–µ–º—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, —Å—Ä–æ–∫–∏, –ø—Ä–æ—Ü–µ—Å—Å—ã. –ë–ï–ó –ø—Ä–æ–±–ª–µ–º –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π!]

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É.


–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –î–ê. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ "–∑–∞–≤–µ—Ä—à–∏—Ç—å". –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ."""

WELCOME_MESSAGE = """üéØ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –¢–†–ï–ù–ê–ñ–ï–† SPIN-–ü–†–û–î–ê–ñ!

–ü—Ä–∏–≤–µ—Ç! –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–æ—Ä–∏–∏ SPIN-–ø—Ä–æ–¥–∞–∂ –ù–∏–ª–∞ –†–µ–∫—Ö–µ–º–∞. –ó–¥–µ—Å—å —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–∞–º!

üìö –¢–ò–ü–´ –í–û–ü–†–û–°–û–í SPIN:

üîç –°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ - —Å–æ–±—Ä–∞—Ç—å —Ñ–∞–∫—Ç—ã –æ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ - –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å, —Å–∫—Ä—ã—Ç—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏  
üí• –ò–∑–≤–ª–µ–∫–∞—é—â–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, —É—Å–∏–ª–∏—Ç—å –∏—Ö –≤–∞–∂–Ω–æ—Å—Ç—å
‚ú® –ù–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ - –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–µ—Å–µ–¥—É –≤ –∑–æ–Ω—É –ø–æ–ª—å–∑—ã

üéÆ –ü–†–ê–í–ò–õ–ê –¢–†–ï–ù–ò–†–û–í–ö–ò:
–î–æ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ | –¶–µ–ª—å: –≤—ã—è—Å–Ω–∏—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–∞ | –ó–∞–¥–∞—á–∞: –∑–∞–¥–∞—Ç—å –≤—Å–µ 4 —Ç–∏–ø–∞ SPIN-–≤–æ–ø—Ä–æ—Å–æ–≤

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? –ù–∞–ø–∏—à–∏ "–Ω–∞—á–∞—Ç—å"! 
–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –Ω–∞–ø–∏—à–∏ "–∑–∞–≤–µ—Ä—à–∏—Ç—å"."""

def get_user_data(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data:
        user_data[user_id] = {
            'question_count': 0,
            'clarity_level': 0,
            'situational_q': 0,
            'problem_q': 0,
            'implication_q': 0,
            'need_payoff_q': 0,
            'client_case': '',
            'last_question_type': '',
            'chat_state': 'new'
        }
    return user_data[user_id]

async def call_openai(system_prompt: str, user_message: str) -> str:
    """–í—ã–∑–æ–≤ OpenAI API"""
    try:
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–∑–æ–≤ OpenAI API...")
        print(f"üìù System prompt: {system_prompt[:100]}...")
        print(f"üí¨ User message: {user_message[:100]}...")
        print(f"üîë API Key: {OPENAI_API_KEY[:20] if OPENAI_API_KEY else 'None'}...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        print(f"üèóÔ∏è –°–æ–∑–¥–∞–µ–º AsyncOpenAI –∫–ª–∏–µ–Ω—Ç...")
        client = openai.AsyncOpenAI(
            api_key=OPENAI_API_KEY,
            http_client=httpx.AsyncClient(
                timeout=httpx.Timeout(30.0),
                limits=httpx.Limits(max_connections=1, max_keepalive_connections=1)
            )
        )
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI...")
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ],
            max_tokens=400,
            temperature=0.7
        )
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI")
        
        result = response.choices[0].message.content.strip()
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
        return result
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –≤ call_openai:")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        print(f"   –ü–æ–ª–Ω—ã–π traceback:")
        import traceback
        traceback.print_exc()
        
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"

def analyze_question_type(question: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    question_lower = question.lower()
    
    problem_keywords = ['–ø—Ä–æ–±–ª–µ–º', '—Å–ª–æ–∂–Ω–æ—Å—Ç', '—Ç—Ä—É–¥–Ω–æ—Å—Ç', '–Ω–µ–¥–æ–≤–æ–ª—å–Ω', '–∂–∞–ª–æ–±', '–±–µ—Å–ø–æ–∫–æ–∏']
    implication_keywords = ['–≤–ª–∏—è', '–ø–æ—Å–ª–µ–¥—Å—Ç–≤', '—Å—Ç–æ–∏–º–æ—Å—Ç', '—É–±—ã—Ç', '–ø–æ—Ç–µ—Ä', '—Ä–∏—Å–∫', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç']
    need_payoff_keywords = ['–ø–æ–º–æ–∂', '–ø–æ–ª—å–∑', '–≤—ã–≥–æ–¥', '–≤–∞–∂–Ω–æ', '—Ü–µ–Ω–Ω–æ—Å—Ç', '—ç–∫–æ–Ω–æ–º–∏']
    
    if any(keyword in question_lower for keyword in problem_keywords):
        return '–ü—Ä–æ–±–ª–µ–º–Ω—ã–π'
    elif any(keyword in question_lower for keyword in implication_keywords):
        return '–ò–∑–≤–ª–µ–∫–∞—é—â–∏–π'
    elif any(keyword in question_lower for keyword in need_payoff_keywords):
        return '–ù–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π'
    else:
        return '–°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–π'

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    print(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {
        'question_count': 0,
        'clarity_level': 0,
        'situational_q': 0,
        'problem_q': 0,
        'implication_q': 0,
        'need_payoff_q': 0,
        'client_case': '',
        'last_question_type': '',
        'chat_state': 'started'
    }
    
    await update.message.reply_text(WELCOME_MESSAGE)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–µ–π—Å
    try:
        client_case = await call_openai(CASE_GENERATION_PROMPT, '–°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –∫–µ–π—Å')
        user_data[user_id]['client_case'] = client_case
        user_data[user_id]['chat_state'] = 'waiting_question'
        await update.message.reply_text(client_case)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–µ–π—Å–∞: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–µ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    user_id = update.effective_user.id
    user = get_user_data(user_id)
    
    if not user['last_question_type']:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É.')
        return
    
    feedback_prompt = f"""–í—ã –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ SPIN-–ø—Ä–æ–¥–∞–∂. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∏ –¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:

–¢–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {user['last_question_type']}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {user['question_count']}
–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —è—Å–Ω–æ—Å—Ç–∏: {user['clarity_level']}%

–¢–∏–ø—ã —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:
- –°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã—Ö: {user['situational_q']}
- –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: {user['problem_q']}  
- –ò–∑–≤–ª–µ–∫–∞—é—â–∏—Ö: {user['implication_q']}
- –ù–∞–ø—Ä–∞–≤–ª—è—é—â–∏—Ö: {user['need_payoff_q']}

–î–∞–π—Ç–µ:
1. –û—Ü–µ–Ω–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (0-100%)
2. –°–æ–≤–µ—Ç –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
3. –ü—Ä–∏–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–∏–ø–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"""

    try:
        feedback = await call_openai(feedback_prompt, '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é')
        await update.message.reply_text(f"""üìä –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ –û–¢ –ù–ê–°–¢–ê–í–ù–ò–ö–ê:

{feedback}

–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.""")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        await update.message.reply_text('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.')

async def send_final_report(update: Update, user: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    total_score = user['situational_q'] * 10 + user['problem_q'] * 15 + user['implication_q'] * 25 + user['need_payoff_q'] * 20
    
    if total_score <= 100:
        badge = 'ü•â –ù–∞—á–∏–Ω–∞—é—â–∏–π –∏—Å–∫–∞—Ç–µ–ª—å'
    elif total_score <= 200:
        badge = 'ü•à –ù–∞—Å—Ç–∞–≤–Ω–∏–∫-—Å—Ç—É–¥–µ–Ω—Ç'
    elif total_score <= 300:
        badge = 'ü•á –°—Ç—Ä–∞—Ç–µ–≥ SPIN'
    else:
        badge = 'üèÜ –ú–∞—ç—Å—Ç—Ä–æ SPIN-–ø—Ä–æ–¥–∞–∂'
    
    recommendations = []
    if user['situational_q'] > user['problem_q'] * 2:
        recommendations.append('‚Ä¢ –°–æ–∫—Ä–∞—â–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤')
    if user['problem_q'] == 0:
        recommendations.append('‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π')
    if user['implication_q'] == 0:
        recommendations.append('‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–≤–ª–µ–∫–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–±–ª–µ–º')
    if user['need_payoff_q'] == 0:
        recommendations.append('‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤—ã–≥–æ–¥ —Ä–µ—à–µ–Ω–∏—è')
    if user['clarity_level'] < 50:
        recommendations.append('‚Ä¢ –ì–ª—É–±–∂–µ –∏—Å—Å–ª–µ–¥—É–π—Ç–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞')
    
    recommendations_text = '\n'.join(recommendations) if recommendations else '‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.'
    
    report = f"""üèÅ –¢–†–ï–ù–ò–†–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!

üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:
–ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {user['question_count']}/10
–£—Ä–æ–≤–µ–Ω—å —è—Å–Ω–æ—Å—Ç–∏: {user['clarity_level']}%

üìà –ü–û –¢–ò–ü–ê–ú:
üîç –°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã—Ö: {user['situational_q']}
‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: {user['problem_q']}
üí• –ò–∑–≤–ª–µ–∫–∞—é—â–∏—Ö: {user['implication_q']}  
‚ú® –ù–∞–ø—Ä–∞–≤–ª—è—é—â–∏—Ö: {user['need_payoff_q']}

üèÖ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {badge}
–û–±—â–∏–π –±–∞–ª–ª: {total_score}

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
{recommendations_text}

üöÄ –ü–û–õ–ï–ó–ù–´–ô –ö–û–ù–¢–ï–ù–¢ –ü–û –ü–†–û–î–ñ–ê–ú –ò –ò–ò:
–∏ –Ω–æ–≤—ã–µ –±–æ—Ç—ã –≤ –±—É–¥—É—â–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª–µ @TaktikaKutuzova

üéØ –î–ª—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–∞—á–∞—Ç—å" """

    await update.message.reply_text(report)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    if message_text.lower() in ['–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']:
        await start_command(update, context)
        return
    
    if message_text.upper() == '–î–ê':
        await handle_feedback(update, context)
        return
    
    if message_text.lower() == '–∑–∞–≤–µ—Ä—à–∏—Ç—å':
        user = get_user_data(user_id)
        await send_final_report(update, user)
        if user_id in user_data:
            del user_data[user_id]
        return
    
    if len(message_text) <= 5:
        await update.message.reply_text('–ó–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–∞—á–∞—Ç—å" –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.')
        return
    
    user = get_user_data(user_id)
    
    if user['question_count'] >= 10:
        await send_final_report(update, user)
        if user_id in user_data:
            del user_data[user_id]
        return
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
        question_type = analyze_question_type(message_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        user['question_count'] += 1
        user['last_question_type'] = question_type
        
        if question_type == '–°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–π':
            user['situational_q'] += 1
            user['clarity_level'] += 10
        elif question_type == '–ü—Ä–æ–±–ª–µ–º–Ω—ã–π':
            user['problem_q'] += 1
            user['clarity_level'] += 15
        elif question_type == '–ò–∑–≤–ª–µ–∫–∞—é—â–∏–π':
            user['implication_q'] += 1
            user['clarity_level'] += 25
        elif question_type == '–ù–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π':
            user['need_payoff_q'] += 1
            user['clarity_level'] += 20
        
        user['clarity_level'] = min(user['clarity_level'], 100)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        client_prompt = f"""–í—ã –∫–ª–∏–µ–Ω—Ç –∏–∑ –∫–µ–π—Å–∞: {user['client_case']}

–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ –∏ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ. –ù–ï —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–∞–º–∏ - —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –°–ü–ò–ù-–≤–æ–ø—Ä–æ—Å—ã. 

–ü—Ä–∏–Ω—Ü–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤:
- –ù–∞ —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –¥–∞–≤–∞–π—Ç–µ —Ñ–∞–∫—Ç—ã
- –ù–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ: –ø—Ä–∏–∑–Ω–∞–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –Ω–µ –¥—Ä–∞–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ
- –ù–∞ –∏–∑–≤–ª–µ–∫–∞—é—â–∏–µ: —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
- –ù–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π

–û—Ç–≤–µ—á–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–∞–Ω—è—Ç–æ–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å."""

        client_response = await call_openai(client_prompt, f"–í–æ–ø—Ä–æ—Å: {message_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if user['question_count'] >= 10 or user['clarity_level'] >= 80:
            if user['clarity_level'] >= 80 and user['question_count'] >= 5:
                await update.message.reply_text(f"""–ë—ã–ª –∑–∞–¥–∞–Ω {question_type} –≤–æ–ø—Ä–æ—Å

{client_response}

üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —è—Å–Ω–æ—Å—Ç—å {user['clarity_level']}%. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? (–Ω–∞–ø–∏—à–∏—Ç–µ "–∑–∞–≤–µ—Ä—à–∏—Ç—å" –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã)""")
            elif user['question_count'] >= 10:
                await send_final_report(update, user)
                if user_id in user_data:
                    del user_data[user_id]
            else:
                await update.message.reply_text(f"""–ë—ã–ª –∑–∞–¥–∞–Ω {question_type} –≤–æ–ø—Ä–æ—Å

{client_response}

–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –î–ê. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ "–∑–∞–≤–µ—Ä—à–∏—Ç—å". –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ.

üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {user['question_count']}/10 –≤–æ–ø—Ä–æ—Å–æ–≤, —è—Å–Ω–æ—Å—Ç—å {user['clarity_level']}%""")
        else:
            await update.message.reply_text(f"""–ë—ã–ª –∑–∞–¥–∞–Ω {question_type} –≤–æ–ø—Ä–æ—Å

{client_response}

–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –î–ê. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ "–∑–∞–≤–µ—Ä—à–∏—Ç—å". –ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ.

üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {user['question_count']}/10 –≤–æ–ø—Ä–æ—Å–æ–≤, —è—Å–Ω–æ—Å—Ç—å {user['clarity_level']}%""")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("SPIN Training Bot –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    import asyncio
    import threading
    
    def run_bot():
        asyncio.run(application.run_polling())
    
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import socket
    
    class HealthCheckHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/health':
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'OK')
            else:
                self.send_response(404)
                self.end_headers()
        
        def log_message(self, format, *args):
            # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
            pass
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
    def find_free_port():
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('', 0))
            s.listen(1)
            port = s.getsockname()[1]
        return port
    
    port = int(os.getenv('PORT', 8080))
    
    try:
        server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
        logger.info(f"Health check server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        server.serve_forever()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ health check —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()

if __name__ == '__main__':
    main()
