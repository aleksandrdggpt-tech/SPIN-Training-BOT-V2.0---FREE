import os
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import time
import openai
import httpx

from engine.scenario_loader import ScenarioLoader, ScenarioValidationError
from engine.question_analyzer import QuestionAnalyzer
from engine.report_generator import ReportGenerator
from engine.case_generator import CaseGenerator

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
SCENARIO_PATH = os.getenv('SCENARIO_PATH', 'scenarios/spin_sales/config.json')

# LLM config
PRIMARY_MODEL = os.getenv('PRIMARY_MODEL', 'gpt-4o-mini')
FALLBACK_MODEL = os.getenv('FALLBACK_MODEL', 'gpt-5-mini')
LLM_TIMEOUT_SEC = float(os.getenv('LLM_TIMEOUT_SEC', '30'))
LLM_MAX_RETRIES = int(os.getenv('LLM_MAX_RETRIES', '1'))

# Dual-pipeline configs (response/feedback)
RESPONSE_PRIMARY_PROVIDER = os.getenv('RESPONSE_PRIMARY_PROVIDER', 'openai')
RESPONSE_PRIMARY_MODEL = os.getenv('RESPONSE_PRIMARY_MODEL', PRIMARY_MODEL)
RESPONSE_FALLBACK_PROVIDER = os.getenv('RESPONSE_FALLBACK_PROVIDER', 'openai')
RESPONSE_FALLBACK_MODEL = os.getenv('RESPONSE_FALLBACK_MODEL', FALLBACK_MODEL)

FEEDBACK_PRIMARY_PROVIDER = os.getenv('FEEDBACK_PRIMARY_PROVIDER', 'openai')
FEEDBACK_PRIMARY_MODEL = os.getenv('FEEDBACK_PRIMARY_MODEL', PRIMARY_MODEL)
FEEDBACK_FALLBACK_PROVIDER = os.getenv('FEEDBACK_FALLBACK_PROVIDER', 'openai')
FEEDBACK_FALLBACK_MODEL = os.getenv('FEEDBACK_FALLBACK_MODEL', FALLBACK_MODEL)

ANTHROPIC_API_KEY = os.getenv('ANTHROPIC_API_KEY')

# Classification pipeline
CLASSIFICATION_PRIMARY_PROVIDER = os.getenv('CLASSIFICATION_PRIMARY_PROVIDER', 'openai')
CLASSIFICATION_PRIMARY_MODEL = os.getenv('CLASSIFICATION_PRIMARY_MODEL', PRIMARY_MODEL)
CLASSIFICATION_FALLBACK_PROVIDER = os.getenv('CLASSIFICATION_FALLBACK_PROVIDER', 'openai')
CLASSIFICATION_FALLBACK_MODEL = os.getenv('CLASSIFICATION_FALLBACK_MODEL', FALLBACK_MODEL)

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print(f"BOT_TOKEN: {BOT_TOKEN}")
print(f"OPENAI_API_KEY: {OPENAI_API_KEY[:20] if OPENAI_API_KEY else 'None'}...")
print(f"SCENARIO_PATH: {SCENARIO_PATH}")
print(f"PRIMARY_MODEL: {PRIMARY_MODEL}")
print(f"FALLBACK_MODEL: {FALLBACK_MODEL}")
print(f"RESP PIPE: {RESPONSE_PRIMARY_PROVIDER}:{RESPONSE_PRIMARY_MODEL} -> {RESPONSE_FALLBACK_PROVIDER}:{RESPONSE_FALLBACK_MODEL}")
print(f"FDBK PIPE: {FEEDBACK_PRIMARY_PROVIDER}:{FEEDBACK_PRIMARY_MODEL} -> {FEEDBACK_FALLBACK_PROVIDER}:{FEEDBACK_FALLBACK_MODEL}")
print(f"CLSF PIPE: {CLASSIFICATION_PRIMARY_PROVIDER}:{CLASSIFICATION_PRIMARY_MODEL} -> {CLASSIFICATION_FALLBACK_PROVIDER}:{CLASSIFICATION_FALLBACK_MODEL}")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, Dict[str, Any]] = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –¥–≤–∏–∂–∫–∞
scenario_loader = ScenarioLoader()
question_analyzer = QuestionAnalyzer()
report_generator = ReportGenerator()
case_generator: Optional[CaseGenerator] = None
scenario_config: Optional[Dict[str, Any]] = None

def get_user_data(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è c –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π session/stats."""
    if user_id not in user_data:
        user_data[user_id] = {
            'session': {
                'question_count': 0,
                'clarity_level': 0,
                'per_type_counts': {},
                'client_case': '',
                'case_data': None,  # –°–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞
                'last_question_type': '',
                'chat_state': 'new',
                'contextual_questions': 0,
                'last_client_response': '',
                'context_streak': 0
            },
            'stats': {
                'total_trainings': 0,
                'total_questions': 0,
                'best_score': 0,
                'total_xp': 0,
                'current_level': 1,
                'badges_earned': [],
                'achievements_unlocked': [],
                'master_streak': 0,
                'total_contextual_questions': 0,
                'last_contextual_questions': 0,
                'last_training_date': None,
                'recent_cases': []  # –•–µ—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∫–µ–π—Å–æ–≤
            }
        }
    return user_data[user_id]

def reset_session(user_id: int) -> None:
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞."""
    u = get_user_data(user_id)
    cfg = _ensure_scenario_loaded()
    u['session'] = {
        'question_count': 0,
        'clarity_level': 0,
        'per_type_counts': {t['id']: 0 for t in cfg['question_types']},
        'client_case': '',
        'case_data': None,  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞
        'last_question_type': '',
        'chat_state': 'waiting_start'
    }

def update_stats(user_id: int, session_score: int) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
    u = get_user_data(user_id)
    s = u['session']
    st = u['stats']
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st['total_trainings'] += 1
    st['total_questions'] += int(s.get('question_count', 0))
    st['best_score'] = max(int(st.get('best_score', 0)), int(session_score))
    st['last_training_date'] = datetime.now().isoformat()
    
    # XP –∏ —É—Ä–æ–≤–µ–Ω—å
    st['total_xp'] = int(st.get('total_xp', 0)) + int(session_score)
    cfg = _ensure_scenario_loaded()
    old_level = int(st.get('current_level', 1))
    new_level = _calculate_level(int(st['total_xp']), cfg.get('ranking', {}).get('levels', []))
    st['current_level'] = new_level
    
    # –°–µ—Ä–∏—è –ú–∞—ç—Å—Ç—Ä–æ
    if int(session_score) >= 221:
        st['master_streak'] = int(st.get('master_streak', 0)) + 1
    else:
        st['master_streak'] = 0
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    last_contextual = int(s.get('contextual_questions', 0))
    st['last_contextual_questions'] = last_contextual
    st['total_contextual_questions'] = int(st.get('total_contextual_questions', 0)) + last_contextual

    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è Active Listening)
    _check_achievements(user_id)
    
    # –õ–æ–≥ –æ–± —É—Ä–æ–≤–Ω–µ
    if new_level > old_level:
        logger.info(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å: {old_level} ‚Üí {new_level}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        st['level_up_notification'] = {
            'old_level': old_level,
            'new_level': new_level,
            'should_show': True
        }

def _calculate_level(xp: int, levels: List[Dict]) -> int:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ –æ–ø—ã—Ç—É"""
    try:
        for lvl in sorted(levels, key=lambda l: int(l.get('min_xp', 0))):
            if xp < int(lvl.get('min_xp', 0)):
                break
        # –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, —á–µ–π min_xp <= xp
        eligible = [int(l.get('level', 1)) for l in levels if xp >= int(l.get('min_xp', 0))]
        return max(eligible) if eligible else 1
    except Exception:
        return 1

def _check_achievements(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    u = get_user_data(user_id)
    st = u['stats']
    cfg = _ensure_scenario_loaded()
    achievements = cfg.get('achievements', {}).get('list', [])
    
    newly_unlocked = []
    for ach in achievements:
        if ach.get('id') in st.get('achievements_unlocked', []):
            continue
        condition = ach.get('condition', '')
        try:
            if eval(condition, {"__builtins__": {}}, st):
                st['achievements_unlocked'].append(ach['id'])
                newly_unlocked.append(ach)
                logger.info(f"üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {ach.get('name')}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è {ach.get('id')}: {e}")
    return newly_unlocked

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞"""
    help_text = """üìñ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ:
/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
/stats - –í–∞—à–∞ –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/rank - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–Ω–≥–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
/case - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∫–µ–π—Å–µ

üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:
/scenario - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏
/validate - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí¨ –ö–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:
‚Ä¢ "–Ω–∞—á–∞—Ç—å" –∏–ª–∏ "—Å—Ç–∞—Ä—Ç" - –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
‚Ä¢ "–î–ê" - –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
‚Ä¢ "–∑–∞–≤–µ—Ä—à–∏—Ç—å" - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É

‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /start!"""
    
    await update.message.reply_text(help_text)

def log_case_statistics(user_id: int):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤"""
    user = user_data.get(user_id)
    if not user or not user['session'].get('case_data'):
        return
    
    case_data = user['session']['case_data']
    logger.info(f"""
    === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ï–ô–°–ê ===
    User ID: {user_id}
    –î–æ–ª–∂–Ω–æ—Å—Ç—å: {case_data['position']}
    –ö–æ–º–ø–∞–Ω–∏—è: {case_data['company']['type']}
    –†–∞–∑–º–µ—Ä: {case_data['company_size']}
    –ü—Ä–æ–¥—É–∫—Ç: {case_data['product']['name']}
    –û–±—ä—ë–º: {case_data['volume']}
    –¢–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏: {case_data['situation']['type']}
    ========================
    """)

async def call_llm(kind: str, system_prompt: str, user_message: str) -> str:
    """–í—ã–∑–æ–≤ LLM –ø–æ –∫–æ–Ω–≤–µ–π–µ—Ä—É kind ('response'|'feedback') —Å —Ñ–æ–ª–±—ç–∫–æ–º –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏."""
    assert kind in ('response', 'feedback', 'classification', 'context')

    if kind == 'response':
        primary_provider = RESPONSE_PRIMARY_PROVIDER
        primary_model = RESPONSE_PRIMARY_MODEL
        fallback_provider = RESPONSE_FALLBACK_PROVIDER
        fallback_model = RESPONSE_FALLBACK_MODEL
    elif kind == 'feedback':
        primary_provider = FEEDBACK_PRIMARY_PROVIDER
        primary_model = FEEDBACK_PRIMARY_MODEL
        fallback_provider = FEEDBACK_FALLBACK_PROVIDER
        fallback_model = FEEDBACK_FALLBACK_MODEL
    else:
        primary_provider = CLASSIFICATION_PRIMARY_PROVIDER
        primary_model = CLASSIFICATION_PRIMARY_MODEL
        fallback_provider = CLASSIFICATION_FALLBACK_PROVIDER
        fallback_model = CLASSIFICATION_FALLBACK_MODEL

    async def _invoke_openai(model_name: str) -> str:
        client = openai.AsyncOpenAI(
            api_key=OPENAI_API_KEY,
            http_client=httpx.AsyncClient(
                timeout=httpx.Timeout(LLM_TIMEOUT_SEC),
                limits=httpx.Limits(max_connections=1, max_keepalive_connections=1)
            )
        )
        # –î–ª—è —á–∞—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π (–Ω–∞–ø—Ä. gpt-5-*) –ø–∞—Ä–∞–º–µ—Ç—Ä max_tokens –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        openai_payload = {
            "model": model_name,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ],
            "temperature": 0.0 if kind == 'classification' else 0.7,
        }
        if str(model_name).startswith("gpt-5"):
            openai_payload["max_completion_tokens"] = 20 if kind == 'classification' else 400
            logger.info(f"OpenAI payload (gpt-5*): keys={list(openai_payload.keys())}")
        else:
            openai_payload["max_tokens"] = 20 if kind == 'classification' else 400
            logger.info(f"OpenAI payload: keys={list(openai_payload.keys())}")
        try:
            resp = await client.chat.completions.create(**openai_payload)
        except Exception as e:
            logger.error(f"OpenAI request failed model={model_name} keys={list(openai_payload.keys())} error={e}")
            raise
        return resp.choices[0].message.content.strip()

    async def _invoke_anthropic(model_name: str) -> str:
        if not ANTHROPIC_API_KEY:
            raise RuntimeError("Anthropic API key not set")
        url = "https://api.anthropic.com/v1/messages"
        headers = {
            "x-api-key": ANTHROPIC_API_KEY,
            "anthropic-version": "2023-06-01",
            "content-type": "application/json"
        }
        payload = {
            "model": model_name,
            "max_tokens": 10 if kind == 'context' else (20 if kind == 'classification' else 400),
            "system": system_prompt,
            "messages": [{"role": "user", "content": user_message}],
            "temperature": 0.0 if kind in ('classification','context') else 0.7
        }
        async with httpx.AsyncClient(timeout=httpx.Timeout(LLM_TIMEOUT_SEC)) as client:
            r = await client.post(url, headers=headers, json=payload)
            r.raise_for_status()
            data = r.json()
            # content: [{"type":"text","text":"..."}, ...]
            content = data.get('content', [])
            if content and isinstance(content, list) and 'text' in content[0]:
                return content[0]['text'].strip()
            raise RuntimeError("Anthropic response format unexpected")

    async def _invoke(provider: str, model: str) -> str:
        if provider == 'openai':
            return await _invoke_openai(model)
        elif provider == 'anthropic':
            return await _invoke_anthropic(model)
        else:
            raise RuntimeError(f"Unknown provider: {provider}")

    # Primary with retries
    for attempt in range(LLM_MAX_RETRIES + 1):
        try:
            logger.info(f"LLM primary: {kind} provider={primary_provider} model={primary_model} attempt={attempt+1}")
            return await _invoke(primary_provider, primary_model)
        except Exception as e:
            logger.warning(f"Primary failed ({kind}): {type(e).__name__}: {e}")
            if attempt < LLM_MAX_RETRIES:
                continue
    # Fallback
    try:
        logger.info(f"LLM fallback: {kind} provider={fallback_provider} model={fallback_model}")
        return await _invoke(fallback_provider, fallback_model)
    except Exception as e:
        logger.error(f"Fallback failed ({kind}): {type(e).__name__}: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
    
def _ensure_scenario_loaded() -> Dict[str, Any]:
    global scenario_config, case_generator
    if scenario_config is None:
        try:
            loaded = scenario_loader.load_scenario(SCENARIO_PATH)
            scenario_config = loaded.config
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CaseGenerator –µ—Å–ª–∏ –µ—Å—Ç—å case_variants
            if 'case_variants' in scenario_config and case_generator is None:
                case_generator = CaseGenerator(scenario_config['case_variants'])
                logger.info("CaseGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
        except (FileNotFoundError, ScenarioValidationError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            raise
    return scenario_config

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    print(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞
    cfg = _ensure_scenario_loaded()
    reset_session(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_message = scenario_loader.get_message('welcome')
    await update.message.reply_text(welcome_message)

async def scenario_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏."""
    try:
        cfg = _ensure_scenario_loaded()
        info = cfg.get('scenario_info', {})
        await update.message.reply_text(
            f"–°—Ü–µ–Ω–∞—Ä–∏–π: {info.get('name')} v{info.get('version')}\n–û–ø–∏—Å–∞–Ω–∏–µ: {info.get('description')}\n–ü—É—Ç—å: {SCENARIO_PATH}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏.")

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    user_id = update.effective_user.id
    user = get_user_data(user_id)
    
    session = user['session']
    if not session['last_question_type']:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É.')
        return
    
    cfg = _ensure_scenario_loaded()
    # Counters by type from current session
    per_type = session.get('per_type_counts', {})
    situational_q = int(per_type.get('situational', 0))
    problem_q = int(per_type.get('problem', 0))
    implication_q = int(per_type.get('implication', 0))
    need_payoff_q = int(per_type.get('need_payoff', 0))
    feedback_prompt = scenario_loader.get_prompt(
        'feedback',
        last_question_type=session['last_question_type'],
        question_count=session['question_count'],
        clarity_level=session['clarity_level'],
        situational_q=situational_q,
        problem_q=problem_q,
        implication_q=implication_q,
        need_payoff_q=need_payoff_q,
    )

    try:
        feedback = await call_llm('feedback', feedback_prompt, '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Ç—É–∞—Ü–∏—é')
        await update.message.reply_text(
            f"üìä –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨ –û–¢ –ù–ê–°–¢–ê–í–ù–ò–ö–ê:\n\n{feedback}\n\n–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        await update.message.reply_text(scenario_loader.get_message('error_generic'))

async def send_final_report(update: Update, user: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)."""
    cfg = _ensure_scenario_loaded()
    session = user['session']
    case_data = session.get('case_data')

    # –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ñ–∏–≥
    temp_user = {
        'question_count': session['question_count'],
        'clarity_level': session['clarity_level'],
        'per_type_counts': session['per_type_counts'],
    }
    temp_user['total_score'] = QuestionAnalyzer().calculate_score(session, cfg['question_types'])

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á—ë—Ç
    report = ReportGenerator().generate_final_report(temp_user, cfg)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ–π—Å–µ
    case_info = ""
    if case_data:
        case_info = f"""
üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ï–ô–°–ï:
–î–æ–ª–∂–Ω–æ—Å—Ç—å: {case_data['position']}
–ö–æ–º–ø–∞–Ω–∏—è: {case_data['company']['type']}
–ü—Ä–æ–¥—É–∫—Ç: {case_data['product']['name']}
–û–±—ä—ë–º: {case_data['volume']}
"""

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = user['stats']
    stats_info = f"""
üìà –í–ê–®–ê –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
–ü—Ä–æ–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['total_trainings']}
–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {stats['total_questions']}
–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']} –±–∞–ª–ª–æ–≤
"""

    # –ù–û–í–û–ï: –†–∞–Ω–≥ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    levels = cfg.get('ranking', {}).get('levels', [])
    stats = user['stats']
    current_level_data = next((l for l in levels if l.get('level') == stats.get('current_level', 1)), (levels[0] if levels else {'level': 1, 'name': '–ù–æ–≤–∏—á–æ–∫', 'emoji': 'üå±', 'min_xp': 0, 'description': ''}))
    next_level_data = next((l for l in levels if l.get('level') == stats.get('current_level', 1) + 1), None)
    xp_progress = ""
    if next_level_data:
        current_xp = int(stats.get('total_xp', 0))
        xp_to_next = int(next_level_data.get('min_xp', 0)) - current_xp
        if xp_to_next > 0:
            xp_progress = f"\n–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {xp_to_next} XP"
    rank_info = f"""
‚≠ê –í–ê–® –†–ê–ù–ì:
{current_level_data.get('emoji', '')} –£—Ä–æ–≤–µ–Ω—å {current_level_data.get('level', 1)}: {current_level_data.get('name', '')}
–û–ø—ã—Ç (XP): {stats.get('total_xp', 0)}{xp_progress}
{current_level_data.get('description', '')}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rank –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
"""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    level_up_msg = ""
    if stats.get('level_up_notification', {}).get('should_show'):
        notif = stats['level_up_notification']
        level_data = next((l for l in levels if l.get('level') == notif['new_level']), None)
        level_emoji = level_data.get('emoji', 'üéâ') if level_data else 'üéâ'
        level_name = level_data.get('name', '') if level_data else ''
        level_up_msg = f"\n\nüéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–´ –ü–û–í–´–°–ò–õ–ò –£–†–û–í–ï–ù–¨!\n{level_emoji} –£—Ä–æ–≤–µ–Ω—å {notif['old_level']} ‚Üí –£—Ä–æ–≤–µ–Ω—å {notif['new_level']}: {level_name}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rank –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π\n"
        stats['level_up_notification']['should_show'] = False

    newly_unlocked = _check_achievements(update.effective_user.id)
    achievements_info = ""
    if newly_unlocked:
        achievements_info = "\n\nüéñÔ∏è –ù–û–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:\n" + "\n".join(
            f"{ach.get('emoji', '')} {ach.get('name', '')} - {ach.get('description', '')}"
            for ach in newly_unlocked
        )

    # –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    contextual_q = int(user['session'].get('contextual_questions', 0))
    qcount = int(user['session'].get('question_count', 0))
    contextual_pct = int((contextual_q / qcount) * 100) if qcount > 0 else 0
    listening_section = f"""
üëÇ –ê–ö–¢–ò–í–ù–û–ï –°–õ–£–®–ê–ù–ò–ï:
–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {contextual_q}/{qcount} ({contextual_pct}%)
"""
    if contextual_pct >= 70:
        listening_section += "üèÜ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞!\n"
    elif contextual_pct >= 40:
        listening_section += "üí° –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ —á–∞—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤\n"
    else:
        listening_section += "‚ö†Ô∏è –°–æ–≤–µ—Ç: —Å—Ç—Ä–æ–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞\n"

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç—á—ë—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    full_report = f"{report}{case_info}{stats_info}{listening_section}{rank_info}{level_up_msg}{achievements_info}\n\nüéØ –î–ª—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–Ω–∞—á–∞—Ç—å\" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
    await update.message.reply_text(full_report)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    message_text = update.message.text
    cfg = _ensure_scenario_loaded()
    rules = cfg['game_rules']
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
    u = get_user_data(user_id)
    sess = u['session']
    if sess.get('chat_state') == 'waiting_start':
        if message_text.lower() in ['–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']:
            # –ì–ï–ù–ï–†–ò–†–£–ï–ú –ö–ï–ô–° –ó–î–ï–°–¨
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∫–µ–π—Å–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤
                recent_cases = u['stats'].get('recent_cases', [])
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–µ–π—Å
                case_data = case_generator.generate_random_case(exclude_recent=recent_cases)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞
                sess['case_data'] = case_data
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–µ–π—Å –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ GPT (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
                client_case = case_generator.build_case_direct(case_data)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–µ–π—Å
                sess['client_case'] = client_case
                sess['chat_state'] = 'training_active'
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à –∫–µ–π—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                case_hash = case_generator._get_case_hash(case_data)
                recent_cases.append(case_hash)
                if len(recent_cases) > 5:
                    recent_cases.pop(0)
                u['stats']['recent_cases'] = recent_cases
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ–π—Å–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                log_case_statistics(user_id)
                logger.info(f"""
                === –ö–ï–ô–° –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù –ú–ì–ù–û–í–ï–ù–ù–û ===
                –ú–µ—Ç–æ–¥: –ü—Ä—è–º–∞—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ (–±–µ–∑ GPT)
                User ID: {user_id}
                –î–æ–ª–∂–Ω–æ—Å—Ç—å: {case_data['position']}
                –ö–æ–º–ø–∞–Ω–∏—è: {case_data['company']['type']}
                –ü—Ä–æ–¥—É–∫—Ç: {case_data['product']['name']}
                –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: < 0.001 —Å–µ–∫
                ====================================
                """)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await update.message.reply_text(client_case)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–µ–π—Å–∞: {e}")
                await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–µ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å "–Ω–∞—á–∞—Ç—å".')
            return
        else:
            await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ "–Ω–∞—á–∞—Ç—å" –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
            return
    
    if message_text.upper() == '–î–ê':
        await handle_feedback(update, context)
        return
    
    if message_text.lower() == '–∑–∞–≤–µ—Ä—à–∏—Ç—å':
        user = get_user_data(user_id)
        cfg = _ensure_scenario_loaded()
        
        # 1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_score = QuestionAnalyzer().calculate_score(user['session'], cfg['question_types'])
        update_stats(user_id, total_score)
        
        # 2Ô∏è‚É£ –ü–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á—ë—Ç
        await send_final_report(update, user)
        
        # 3Ô∏è‚É£ –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ–π—Å–∞
        log_case_statistics(user_id)
        
        # 4Ô∏è‚É£ –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        reset_session(user_id)
        return
    
    if len(message_text) <= rules.get('short_question_threshold', 5):
        await update.message.reply_text('–ó–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–∞—á–∞—Ç—å" –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.')
        return
    
    user = get_user_data(user_id)
    session = user['session']
    
    if session['question_count'] >= rules['max_questions']:
        cfg = _ensure_scenario_loaded()
        # 1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_score = QuestionAnalyzer().calculate_score(session, cfg['question_types'])
        update_stats(user_id, total_score)
        # 2Ô∏è‚É£ –ü–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á—ë—Ç
        await send_final_report(update, user)
        # 3Ô∏è‚É£ –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ–π—Å–∞
        log_case_statistics(user_id)
        # 4Ô∏è‚É£ –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        reset_session(user_id)
        return
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM —Å fallback
        qtype = await question_analyzer.classify_question(
            message_text,
            cfg['question_types'],
            session.get('client_case', ''),
            lambda kind, sys, usr: call_llm(kind, sys, usr),
            cfg.get('prompts', {})
        )
        question_type_name = qtype.get('name', qtype.get('id'))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        session['question_count'] += 1
        session['last_question_type'] = question_type_name

        qid = qtype.get('id')
        session['per_type_counts'][qid] = int(session['per_type_counts'].get(qid, 0)) + 1
        session['clarity_level'] += question_analyzer.calculate_clarity_increase(qtype)
        
        session['clarity_level'] = min(session['clarity_level'], 100)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–∞
        case_data = session.get('case_data') or {}
        enriched_prompt = (
            f"–í—ã –∫–ª–∏–µ–Ω—Ç –∏–∑ –∫–µ–π—Å–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n\n"
            f"–†–û–õ–¨: {case_data.get('position', '')} –≤ –∫–æ–º–ø–∞–Ω–∏–∏ \"{(case_data.get('company') or {}).get('type', '')}\"\n"
            f"–ö–û–ù–¢–ï–ö–°–¢: {session.get('client_case', '')}\n\n"
            f"–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n"
            f"- –û–±—ä—ë–º –∑–∞–∫—É–ø–æ–∫: {case_data.get('volume', '')}\n"
            f"- –ß–∞—Å—Ç–æ—Ç–∞: {case_data.get('frequency', '')}\n"
            f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {case_data.get('suppliers_count', '')}\n"
            f"- –¢–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏: {(case_data.get('situation') or {}).get('type', '')}\n"
            f"- –•–∞—Ä–∞–∫—Ç–µ—Ä –∑–∞–∫—É–ø–∫–∏: {case_data.get('urgency', '')}\n\n"
            f"–ü–†–ò–ù–¶–ò–ü–´ –û–¢–í–ï–¢–û–í:\n"
            f"- –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ –∏ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ, –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–Ω—è—Ç–æ–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å\n"
            f"- –ù–ï —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–∞–º–∏ - —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ SPIN-–≤–æ–ø—Ä–æ—Å—ã\n"
            f"- –ù–∞ —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –¥–∞–≤–∞–π—Ç–µ —Ñ–∞–∫—Ç—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
            f"- –ù–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ: –ø—Ä–∏–∑–Ω–∞–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –Ω–µ –¥—Ä–∞–º–∞—Ç–∏–∑–∏—Ä—É–π—Ç–µ\n"
            f"- –ù–∞ –∏–∑–≤–ª–µ–∫–∞—é—â–∏–µ: —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, –Ω–∞–º—ë–∫–∞–º–∏\n"
            f"- –ù–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π\n\n"
            f"–°–¢–ò–õ–¨: –ö–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω.\n\n"
            f"–í–æ–ø—Ä–æ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞: {message_text}"
        )
        client_response = await call_llm('response', enriched_prompt, "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç")

        # === –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –≤–æ–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—à–ª–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ===
        is_contextual = False
        last_resp = session.get('last_client_response', '')
        if last_resp:
            is_contextual = await question_analyzer.check_context_usage(
                message_text,
                last_resp,
                lambda kind, sys, usr: call_llm('context', sys, usr),
                cfg.get('prompts', {})
            )
        context_badge = ""
        if is_contextual:
            session['contextual_questions'] = int(session.get('contextual_questions', 0)) + 1
            contextual_bonus = int(cfg.get('scoring', {}).get('question_weights', {}).get('contextual_bonus', 0))
            session['clarity_level'] = min(100, session['clarity_level'] + contextual_bonus)
            context_badge = " üëÇ"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        session['last_client_response'] = client_response
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if session['question_count'] >= rules['max_questions'] or session['clarity_level'] >= rules['target_clarity']:
            if session['clarity_level'] >= rules['target_clarity'] and session['question_count'] >= rules['min_questions_for_completion']:
                await update.message.reply_text(
                    scenario_loader.get_message(
                        'question_feedback',
                        question_type=question_type_name + context_badge,
                        client_response=client_response,
                        progress_line=scenario_loader.get_message(
                            'progress', count=session['question_count'], max=rules['max_questions'], clarity=session['clarity_level']
                        )
                    )
                )
                await update.message.reply_text(
                    scenario_loader.get_message('clarity_reached', clarity=session['clarity_level'])
                )
            elif session['question_count'] >= rules['max_questions']:
                cfg = _ensure_scenario_loaded()
                # 1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_score = QuestionAnalyzer().calculate_score(session, cfg['question_types'])
                update_stats(user_id, total_score)
                # 2Ô∏è‚É£ –ü–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á—ë—Ç
                await send_final_report(update, user)
                # 3Ô∏è‚É£ –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ–π—Å–∞
                log_case_statistics(user_id)
                # 4Ô∏è‚É£ –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                reset_session(user_id)
            else:
                await update.message.reply_text(
                    scenario_loader.get_message(
                        'question_feedback',
                        question_type=question_type_name + context_badge,
                        client_response=client_response,
                        progress_line=scenario_loader.get_message(
                            'progress', count=session['question_count'], max=rules['max_questions'], clarity=session['clarity_level']
                        )
                    )
                )
        else:
            await update.message.reply_text(
                scenario_loader.get_message(
                    'question_feedback',
                    question_type=question_type_name + context_badge,
                    client_response=client_response,
                    progress_line=scenario_loader.get_message(
                        'progress', count=session['question_count'], max=rules['max_questions'], clarity=session['clarity_level']
                    )
                )
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(scenario_loader.get_message('error_generic'))

async def validate_config_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"""
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    _ensure_scenario_loaded()
    errors = []
    warnings = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –£ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –µ—Å—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    for company in case_generator.variants['companies']:
        compatible_products = [
            p for p in case_generator.variants['products']
            if company['type'] in p.get('compatible_companies', [])
        ]
        if not compatible_products:
            errors.append(f"‚ùå {company['type']}: –Ω–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤!")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –£ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –µ—Å—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω positions_by_size)
    positions_by_size = case_generator.variants.get('positions_by_size', {})
    for size in case_generator.variants['company_sizes']:
        if positions_by_size and not positions_by_size.get(size):
            errors.append(f"‚ùå {size}: –Ω–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π!")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –£ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–µ)
    for product in case_generator.variants['products']:
        if 'compatible_companies' not in product:
            warnings.append(f"‚ö†Ô∏è {product['name']}: –Ω–µ—Ç –ø–æ–ª—è compatible_companies")
        if 'frequency_options' not in product:
            warnings.append(f"‚ö†Ô∏è {product['name']}: –Ω–µ—Ç –ø–æ–ª—è frequency_options")
        if 'volume_range' not in product:
            warnings.append(f"‚ö†Ô∏è {product['name']}: –Ω–µ—Ç –ø–æ–ª—è volume_range")

    result = "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:\n\n"
    if errors:
        result += "üö® –û–®–ò–ë–ö–ò:\n" + "\n".join(errors) + "\n\n"
    if warnings:
        result += "‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:\n" + "\n".join(warnings) + "\n\n"
    if not errors and not warnings:
        result += "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞! –õ–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(result)
async def test_speed_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–µ–π—Å–æ–≤"""
    await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç –ø—Ä—è–º–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    start = time.time()
    case_data = case_generator.generate_random_case()
    case_direct = case_generator.build_case_direct(case_data)
    time_direct = time.time() - start
    
    # –¢–µ—Å—Ç —Å GPT (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    start = time.time()
    try:
        case_prompt = case_generator.build_case_prompt(case_data)
        case_gpt = await call_llm('response', case_prompt, '–°–æ–∑–¥–∞–π –∫–µ–π—Å')
        time_gpt = time.time() - start
    except Exception:
        time_gpt = 0.0
    
    result = f"""üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:

‚ö° –ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {time_direct:.4f} —Å–µ–∫
ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å GPT: {time_gpt:.4f} —Å–µ–∫

–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {time_gpt/time_direct if time_direct > 0 and time_gpt > 0 else 0:.1f}x

‚úÖ –ü—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–∏—Ç {max(time_gpt - time_direct, 0):.2f} —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π –∫–µ–π—Å!"""
    
    await update.message.reply_text(result)
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    if user_id not in user_data:
        await update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /start')
        return
    
    stats = user_data[user_id]['stats']
    session = user_data[user_id]['session']
    
    session_status = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
    if session['chat_state'] == 'waiting_start':
        session_status = "‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
    elif session['chat_state'] == 'training_active':
        session_status = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ({session['question_count']}/10 –≤–æ–ø—Ä–æ—Å–æ–≤)"
    
    stats_message = f"""üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:

üéØ –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
- –ü—Ä–æ–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['total_trainings']}
- –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total_questions']}
- –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_score']} –±–∞–ª–ª–æ–≤

üèÜ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:
{chr(10).join(stats['badges_earned'][-5:]) if stats['badges_earned'] else '‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥'}

‚è± –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:
{stats['last_training_date'] if stats['last_training_date'] else '–ï—â—ë –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å'}

üìç –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:
{session_status}

üí° –î–ª—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–∞—á–∞—Ç—å" –∏–ª–∏ /start"""

    await update.message.reply_text(stats_message)

async def case_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–µ–π—Å–µ"""
    user_id = update.effective_user.id
    
    if user_id not in user_data:
        await update.message.reply_text('–ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /start')
        return
    
    session = user_data[user_id]['session']
    
    if session['chat_state'] != 'training_active':
        await update.message.reply_text('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–µ–π—Å–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞–ø–∏—Å–∞–≤ "–Ω–∞—á–∞—Ç—å"')
        return
    
    case_data = session.get('case_data')
    if not case_data:
        await update.message.reply_text('–î–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
        return
    
    case_info = f"""üìã –¢–ï–ö–£–©–ò–ô –ö–ï–ô–°:

üë§ –ö–ª–∏–µ–Ω—Ç:
- –î–æ–ª–∂–Ω–æ—Å—Ç—å: {case_data['position']}
- –ö–æ–º–ø–∞–Ω–∏—è: {case_data['company']['type']}
- –†–∞–∑–º–µ—Ä: {case_data['company_size']}
- –†–µ–≥–∏–æ–Ω: {case_data['region']}

üì¶ –ü—Ä–æ–¥—É–∫—Ç: {case_data['product']['name']}
- –û–ø–∏—Å–∞–Ω–∏–µ: {case_data['product'].get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
- –û–±—ä—ë–º –∑–∞–∫—É–ø–æ–∫: {case_data['volume']}
- –ß–∞—Å—Ç–æ—Ç–∞: {case_data['frequency']}

üéØ –°–∏—Ç—É–∞—Ü–∏—è: {case_data['situation']['type']}

üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:
- –í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {session['question_count']}/10
- –£—Ä–æ–≤–µ–Ω—å —è—Å–Ω–æ—Å—Ç–∏: {session['clarity_level']}%

üí¨ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç—É!"""

    await update.message.reply_text(case_info)

async def test_cases_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–µ–π—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    user_id = update.effective_user.id
    
    test_results = "üß™ –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¢–û–†–ê –ö–ï–ô–°–û–í\n\n"
    
    for i in range(5):
        case_data = case_generator.generate_random_case()
        test_results += f"""–ö–µ–π—Å #{i+1}:
üë§ {case_data['position']}
üè¢ {case_data['company']['type']} ({case_data['company_size']})
üì¶ {case_data['product']['name']}
üìä {case_data['volume']} {case_data['frequency']}
üéØ –¢–∏–ø: {case_data['situation']['type']}
{'='*40}
"""
    
    await update.message.reply_text(test_results)

async def rank_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    user_id = update.effective_user.id
    
    if user_id not in user_data:
        await update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /start')
        return
    
    cfg = _ensure_scenario_loaded()
    stats = user_data[user_id]['stats']
    levels = cfg.get('ranking', {}).get('levels', [])
    current_level = stats.get('current_level', 1)
    current_level_data = next((l for l in levels if l.get('level') == current_level), (levels[0] if levels else {'level': 1, 'name': '–ù–æ–≤–∏—á–æ–∫', 'emoji': 'üå±', 'min_xp': 0, 'description': ''}))
    next_level_data = next((l for l in levels if l.get('level') == current_level + 1), None)
    current_xp = int(stats.get('total_xp', 0))
    
    if next_level_data:
        xp_needed = int(next_level_data.get('min_xp', 0)) - int(current_level_data.get('min_xp', 0))
        xp_current = current_xp - int(current_level_data.get('min_xp', 0))
        percent = max(0, min(100, int((xp_current / xp_needed) * 100))) if xp_needed > 0 else 100
        filled = "‚ñà" * (percent // 10)
        empty = "‚ñë" * (10 - percent // 10)
        progress_bar = f"\n[{filled}{empty}] {percent}%"
        xp_to_next = int(next_level_data.get('min_xp', 0)) - current_xp
        next_level_info = f"\n\nüìä –î–æ —É—Ä–æ–≤–Ω—è {next_level_data.get('level')} \"{next_level_data.get('name', '')}\":\n–ù—É–∂–Ω–æ: {max(xp_to_next, 0)} XP{progress_bar}"
    else:
        next_level_info = "\n\nüèÜ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!"
    
    achievements = cfg.get('achievements', {}).get('list', [])
    unlocked = stats.get('achievements_unlocked', [])
    achievements_text = f"\n\nüéñÔ∏è –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ({len(unlocked)}/{len(achievements)}):\n"
    for ach in achievements:
        status = "‚úÖ" if ach.get('id') in unlocked else "‚¨ú"
        achievements_text += f"{status} {ach.get('emoji', '')} {ach.get('name', '')}\n"
    
    rank_message = f"""‚≠ê –í–ê–® –†–ê–ù–ì

{current_level_data.get('emoji', '')} –£—Ä–æ–≤–µ–Ω—å {current_level_data.get('level', 1)}: {current_level_data.get('name', '')}
{current_level_data.get('description', '')}

üíé –û–ø—ã—Ç: {current_xp} XP{next_level_info}{achievements_text}
üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è!"""

    await update.message.reply_text(rank_message)
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        _ensure_scenario_loaded()
    except Exception:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SCENARIO_PATH –∏ —Ñ–æ—Ä–º–∞—Ç config.json")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞, –Ω–æ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("scenario", scenario_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("case", case_command))
    # application.add_handler(CommandHandler("test_cases", test_cases_command))  # dev only
    # application.add_handler(CommandHandler("test_speed", test_speed_command))  # dev only
    application.add_handler(CommandHandler("validate", validate_config_command))
    application.add_handler(CommandHandler("rank", rank_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("SPIN Training Bot –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import socket
    import threading
    
    class HealthCheckHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/health':
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'OK')
            else:
                self.send_response(404)
                self.end_headers()
        
        def log_message(self, format, *args):
            # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
            pass
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
    def find_free_port():
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('', 0))
            s.listen(1)
            port = s.getsockname()[1]
        return port
    
    port = int(os.getenv('PORT', 8080))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º health-check —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    try:
        server = HTTPServer(('0.0.0.0', port), HealthCheckHandler)
        logger.info(f"Health check server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        server_thread = threading.Thread(target=server.serve_forever, daemon=True)
        server_thread.start()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ health check —Å–µ—Ä–≤–µ—Ä–∞: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫)
    try:
        application.run_polling()
    except Exception:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")

if __name__ == '__main__':
    main()
