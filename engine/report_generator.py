from typing import Any, Dict, List


class ReportGenerator:
    """Generates final report, badge, and recommendations based on stats and config."""

    def get_badge(self, score: int, badges: List[Dict[str, Any]]) -> str:
        for b in badges:
            min_score = int(b.get("min_score", 0))
            max_score = int(b.get("max_score", 999999))
            if min_score <= score <= max_score:
                name = b.get("name", "")
                emoji = b.get("emoji", "")
                return f"{emoji} {name}".strip()
        return ""

    def get_recommendations(self, user_stats: Dict[str, Any], config: Dict[str, Any]) -> List[str]:
        recs: List[str] = []
        per_type = user_stats.get("per_type_counts", {})
        clarity = int(user_stats.get("clarity_level", 0))

        # Basic heuristics similar to the legacy implementation
        if per_type.get("situational", 0) > (per_type.get("problem", 0) or 0) * 2:
            recs.append("‚Ä¢ –°–æ–∫—Ä–∞—â–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        if (per_type.get("problem", 0) or 0) == 0:
            recs.append("‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π")
        if (per_type.get("implication", 0) or 0) == 0:
            recs.append("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–≤–ª–µ–∫–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–±–ª–µ–º")
        if (per_type.get("need_payoff", 0) or 0) == 0:
            recs.append("‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤—ã–≥–æ–¥ —Ä–µ—à–µ–Ω–∏—è")
        if clarity < 50:
            recs.append("‚Ä¢ –ì–ª—É–±–∂–µ –∏—Å—Å–ª–µ–¥—É–π—Ç–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞")

        if not recs:
            recs.append("‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        return recs

    def generate_final_report(self, user_stats: Dict[str, Any], config: Dict[str, Any]) -> str:
        ui = config.get("ui", {})
        scoring = config.get("scoring", {})
        badges = scoring.get("badges", [])
        analyzer = user_stats.get("analyzer")  # optional injected analyzer result
        total_score = int(user_stats.get("total_score", 0))

        badge = self.get_badge(total_score, badges)
        recs = self.get_recommendations(user_stats, config)

        # Compose report similar to legacy but generic
        lines: List[str] = []
        lines.append("üèÅ –¢–†–ï–ù–ò–†–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        lines.append("")
        lines.append("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        lines.append(f"–ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {user_stats.get('question_count', 0)}/{config['game_rules']['max_questions']}")
        lines.append(f"–£—Ä–æ–≤–µ–Ω—å —è—Å–Ω–æ—Å—Ç–∏: {user_stats.get('clarity_level', 0)}%")
        lines.append("")
        lines.append("üìà –ü–û –¢–ò–ü–ê–ú:")

        per_type_counts = user_stats.get("per_type_counts", {})
        type_names = {t["id"]: t.get("name", t["id"]) for t in config.get("question_types", [])}
        type_emojis = {t["id"]: t.get("emoji", "") for t in config.get("question_types", [])}
        for tid, count in per_type_counts.items():
            name = type_names.get(tid, tid)
            emoji = type_emojis.get(tid, "")
            lines.append(f"{emoji} {name}: {count}")

        lines.append("")
        lines.append(f"üèÖ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {badge}")
        lines.append(f"–û–±—â–∏–π –±–∞–ª–ª: {total_score}")
        lines.append("")
        lines.append("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        lines.append("\n".join(recs))
        lines.append("")
        lines.append("üéØ –î–ª—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ \"–Ω–∞—á–∞—Ç—å\"")

        return "\n".join(lines)


